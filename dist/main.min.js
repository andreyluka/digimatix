document.addEventListener("DOMContentLoaded", function () {
   let eventCalllback = function (e) {
      let el = e.target,
         clearVal = el.dataset.phoneClear,
         pattern = el.dataset.phonePattern,
         matrix_def = "+7 ( _ _ _ ) _ _ _ - _ _ - _ _",
         matrix = pattern ? pattern : matrix_def,
         i = 0,
         def = matrix.replace(/\D/g, ""),
         val = e.target.value.replace(/\D/g, "");

      if (clearVal !== 'false' && e.type === 'blur') {
         if (val.length < matrix.match(/([\_\d])/g).length) {
            e.target.value = '';
            return;
         }
      }

      if (def.length >= val.length) val = def;

      e.target.value = matrix.replace(/./g, function (a) {
         return /[_\d]/.test(a) && i < val.length ? val.charAt(i++) : i >= val.length ? "" : a
      });
   }
   
   let phone_inputs = document.querySelectorAll('[data-phone-pattern]');
   for (let elem of phone_inputs) {
      for (let ev of ['input', 'blur', 'focus']) {
         elem.addEventListener(ev, eventCalllback);
      }
   }
});;;(function () {
   const sliderTabs = Array.from(document.querySelectorAll('.slider__tab')),
      sliderContainers = Array.from(document.querySelectorAll('.slider__container')),
      sliderBtns = document.querySelector('.slider__btns');

   let slider小ontainer,
      sliderList,
      sliderItems,
      sliderDots,
      sliderItemWidth,
      lastIndex
      currentIndex = 0,
      step = 0;

   sliderFilling();
   generateDots();

   sliderTabs.forEach(tab => {
      tab.addEventListener('click', function (e) {
         const index = sliderTabs.indexOf(e.target);
         sliderContainers.forEach(el => el.classList.remove('slider__container--active'));
         sliderContainers[index].classList.add('slider__container--active');
         
         sliderTabs.forEach(el => el.classList.remove('slider__tab--active'));
         e.target.classList.add('slider__tab--active');

         sliderDots.innerHTML = '';
         
         sliderFilling();
         generateDots();
      });
   });

   sliderBtns.addEventListener('click', function (e) {
      if (e.target.classList.contains('slider__button-right')) {
         currentIndex++;
      } else if (e.target.classList.contains('slider__button-left')) {
         currentIndex--;
      }

      if (currentIndex < 0) currentIndex = lastIndex;
      if (currentIndex > lastIndex) currentIndex = 0;

      step = currentIndex * sliderItemWidth;
      sliderList.style.transform = `translateX(-${step}%)`;

      coloringDots(currentIndex);
   });
   
   function sliderFilling() {
      slider小ontainer = document.querySelector('.slider__container--active');
      sliderList = slider小ontainer.querySelector('.slider__list');
      sliderItems = sliderList.querySelectorAll('.slider__item');
      sliderDots = slider小ontainer.querySelector('.slider__dots');

      sliderItemWidth = parseFloat(window.getComputedStyle(sliderList).gridAutoColumns);
      let limiter = Math.floor(100 / sliderItemWidth) + 1;
      lastIndex = sliderItems.length - limiter;
   }

   function generateDots() {
      for (let i = 0; i < (lastIndex + 1); i++) {
         const sliderDot = document.createElement('li');
         sliderDot.className = "slider__dot";
         sliderDots.append(sliderDot);

         sliderDots.firstElementChild.classList.add('slider__dot--active');
      }
   }

   function coloringDots(index) {
      [].forEach.call(sliderDots.children, el => {
         if (el.classList.contains('slider__dot--active')) el.classList.remove('slider__dot--active');
      });

      sliderDots.children[index].classList.add('slider__dot--active');
   }

})()
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LW1hc2suanMiLCJvZmZlcnMtc2xpZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICBsZXQgZXZlbnRDYWxsbGJhY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgbGV0IGVsID0gZS50YXJnZXQsXG4gICAgICAgICBjbGVhclZhbCA9IGVsLmRhdGFzZXQucGhvbmVDbGVhcixcbiAgICAgICAgIHBhdHRlcm4gPSBlbC5kYXRhc2V0LnBob25lUGF0dGVybixcbiAgICAgICAgIG1hdHJpeF9kZWYgPSBcIis3ICggXyBfIF8gKSBfIF8gXyAtIF8gXyAtIF8gX1wiLFxuICAgICAgICAgbWF0cml4ID0gcGF0dGVybiA/IHBhdHRlcm4gOiBtYXRyaXhfZGVmLFxuICAgICAgICAgaSA9IDAsXG4gICAgICAgICBkZWYgPSBtYXRyaXgucmVwbGFjZSgvXFxEL2csIFwiXCIpLFxuICAgICAgICAgdmFsID0gZS50YXJnZXQudmFsdWUucmVwbGFjZSgvXFxEL2csIFwiXCIpO1xuXG4gICAgICBpZiAoY2xlYXJWYWwgIT09ICdmYWxzZScgJiYgZS50eXBlID09PSAnYmx1cicpIHtcbiAgICAgICAgIGlmICh2YWwubGVuZ3RoIDwgbWF0cml4Lm1hdGNoKC8oW1xcX1xcZF0pL2cpLmxlbmd0aCkge1xuICAgICAgICAgICAgZS50YXJnZXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRlZi5sZW5ndGggPj0gdmFsLmxlbmd0aCkgdmFsID0gZGVmO1xuXG4gICAgICBlLnRhcmdldC52YWx1ZSA9IG1hdHJpeC5yZXBsYWNlKC8uL2csIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICByZXR1cm4gL1tfXFxkXS8udGVzdChhKSAmJiBpIDwgdmFsLmxlbmd0aCA/IHZhbC5jaGFyQXQoaSsrKSA6IGkgPj0gdmFsLmxlbmd0aCA/IFwiXCIgOiBhXG4gICAgICB9KTtcbiAgIH1cbiAgIFxuICAgbGV0IHBob25lX2lucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBob25lLXBhdHRlcm5dJyk7XG4gICBmb3IgKGxldCBlbGVtIG9mIHBob25lX2lucHV0cykge1xuICAgICAgZm9yIChsZXQgZXYgb2YgWydpbnB1dCcsICdibHVyJywgJ2ZvY3VzJ10pIHtcbiAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihldiwgZXZlbnRDYWxsbGJhY2spO1xuICAgICAgfVxuICAgfVxufSk7IiwiOyhmdW5jdGlvbiAoKSB7XHJcbiAgIGNvbnN0IHNsaWRlclRhYnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXJfX3RhYicpKSxcclxuICAgICAgc2xpZGVyQ29udGFpbmVycyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlcl9fY29udGFpbmVyJykpLFxyXG4gICAgICBzbGlkZXJCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fYnRucycpO1xyXG5cclxuICAgbGV0IHNsaWRlctChb250YWluZXIsXHJcbiAgICAgIHNsaWRlckxpc3QsXHJcbiAgICAgIHNsaWRlckl0ZW1zLFxyXG4gICAgICBzbGlkZXJEb3RzLFxyXG4gICAgICBzbGlkZXJJdGVtV2lkdGgsXHJcbiAgICAgIGxhc3RJbmRleFxyXG4gICAgICBjdXJyZW50SW5kZXggPSAwLFxyXG4gICAgICBzdGVwID0gMDtcclxuXHJcbiAgIHNsaWRlckZpbGxpbmcoKTtcclxuICAgZ2VuZXJhdGVEb3RzKCk7XHJcblxyXG4gICBzbGlkZXJUYWJzLmZvckVhY2godGFiID0+IHtcclxuICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgY29uc3QgaW5kZXggPSBzbGlkZXJUYWJzLmluZGV4T2YoZS50YXJnZXQpO1xyXG4gICAgICAgICBzbGlkZXJDb250YWluZXJzLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX19jb250YWluZXItLWFjdGl2ZScpKTtcclxuICAgICAgICAgc2xpZGVyQ29udGFpbmVyc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19jb250YWluZXItLWFjdGl2ZScpO1xyXG4gICAgICAgICBcclxuICAgICAgICAgc2xpZGVyVGFicy5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlcl9fdGFiLS1hY3RpdmUnKSk7XHJcbiAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fdGFiLS1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgIHNsaWRlckRvdHMuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBzbGlkZXJGaWxsaW5nKCk7XHJcbiAgICAgICAgIGdlbmVyYXRlRG90cygpO1xyXG4gICAgICB9KTtcclxuICAgfSk7XHJcblxyXG4gICBzbGlkZXJCdG5zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX19idXR0b24tcmlnaHQnKSkge1xyXG4gICAgICAgICBjdXJyZW50SW5kZXgrKztcclxuICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fYnV0dG9uLWxlZnQnKSkge1xyXG4gICAgICAgICBjdXJyZW50SW5kZXgtLTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA8IDApIGN1cnJlbnRJbmRleCA9IGxhc3RJbmRleDtcclxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IGxhc3RJbmRleCkgY3VycmVudEluZGV4ID0gMDtcclxuXHJcbiAgICAgIHN0ZXAgPSBjdXJyZW50SW5kZXggKiBzbGlkZXJJdGVtV2lkdGg7XHJcbiAgICAgIHNsaWRlckxpc3Quc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoLSR7c3RlcH0lKWA7XHJcblxyXG4gICAgICBjb2xvcmluZ0RvdHMoY3VycmVudEluZGV4KTtcclxuICAgfSk7XHJcbiAgIFxyXG4gICBmdW5jdGlvbiBzbGlkZXJGaWxsaW5nKCkge1xyXG4gICAgICBzbGlkZXLQoW9udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fY29udGFpbmVyLS1hY3RpdmUnKTtcclxuICAgICAgc2xpZGVyTGlzdCA9IHNsaWRlctChb250YWluZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fbGlzdCcpO1xyXG4gICAgICBzbGlkZXJJdGVtcyA9IHNsaWRlckxpc3QucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlcl9faXRlbScpO1xyXG4gICAgICBzbGlkZXJEb3RzID0gc2xpZGVy0KFvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyX19kb3RzJyk7XHJcblxyXG4gICAgICBzbGlkZXJJdGVtV2lkdGggPSBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNsaWRlckxpc3QpLmdyaWRBdXRvQ29sdW1ucyk7XHJcbiAgICAgIGxldCBsaW1pdGVyID0gTWF0aC5mbG9vcigxMDAgLyBzbGlkZXJJdGVtV2lkdGgpICsgMTtcclxuICAgICAgbGFzdEluZGV4ID0gc2xpZGVySXRlbXMubGVuZ3RoIC0gbGltaXRlcjtcclxuICAgfVxyXG5cclxuICAgZnVuY3Rpb24gZ2VuZXJhdGVEb3RzKCkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IChsYXN0SW5kZXggKyAxKTsgaSsrKSB7XHJcbiAgICAgICAgIGNvbnN0IHNsaWRlckRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgIHNsaWRlckRvdC5jbGFzc05hbWUgPSBcInNsaWRlcl9fZG90XCI7XHJcbiAgICAgICAgIHNsaWRlckRvdHMuYXBwZW5kKHNsaWRlckRvdCk7XHJcblxyXG4gICAgICAgICBzbGlkZXJEb3RzLmZpcnN0RWxlbWVudENoaWxkLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fZG90LS1hY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gICBmdW5jdGlvbiBjb2xvcmluZ0RvdHMoaW5kZXgpIHtcclxuICAgICAgW10uZm9yRWFjaC5jYWxsKHNsaWRlckRvdHMuY2hpbGRyZW4sIGVsID0+IHtcclxuICAgICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX19kb3QtLWFjdGl2ZScpKSBlbC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX2RvdC0tYWN0aXZlJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2xpZGVyRG90cy5jaGlsZHJlbltpbmRleF0uY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19kb3QtLWFjdGl2ZScpO1xyXG4gICB9XHJcblxyXG59KSgpIl19
